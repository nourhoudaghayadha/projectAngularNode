{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductServiceService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:3000/api/';\n    //initialase BehaviorSubject to follow the change of the search \n    this.searchBarTouchedSubject = new BehaviorSubject(\"\");\n    //convet the value to observable to allow other parte to know if the value change\n    this.searchBarTouched$ = this.searchBarTouchedSubject.asObservable();\n  }\n  getProduit() {\n    return this.http.get(this.url + 'GetProduct').pipe(map(products => products.map(product => {\n      if (product.imageUrl) {\n        product.imageUrl = `http://localhost:3000/api/${product.imageUrl}`;\n      }\n      return product;\n    })));\n  }\n  createProduct(prodData) {\n    return this.http.post(this.url + 'AddProduct', prodData);\n  }\n  //delete Product\n  delete(id) {\n    return this.http.delete(this.url + \"id/\" + id);\n  }\n  getProductById(id) {\n    return this.http.get(this.url + \"id/\" + id);\n  }\n  update(id, hero) {\n    return this.http.put(this.url + \"id/\" + id, hero);\n  }\n  searchByName(ProductName) {\n    return this.http.get(`${this.url}search/${ProductName}`);\n  }\n}\nProductServiceService.ɵfac = function ProductServiceService_Factory(t) {\n  return new (t || ProductServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductServiceService,\n  factory: ProductServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAmB,MAAM;AACjD,SAASC,GAAG,QAAQ,gBAAgB;;;AAIpC,OAAM,MAAOC,qBAAqB;EAEhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAEhB,QAAG,GAAG,4BAA4B;IAE1C;IACA,4BAAuB,GAAG,IAAIJ,eAAe,CAAS,EAAE,CAAC;IACzD;IACA,sBAAiB,GAAG,IAAI,CAACK,uBAAuB,CAACC,YAAY,EAAE;EAPvB;EAYxCC,UAAU;IACR,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAiB,IAAI,CAACC,GAAG,GAAG,YAAY,CAAC,CAACC,IAAI,CAChET,GAAG,CAACU,QAAQ,IAAIA,QAAQ,CAACV,GAAG,CAACW,OAAO,IAAG;MACrC,IAAIA,OAAO,CAACC,QAAQ,EAAE;QACpBD,OAAO,CAACC,QAAQ,GAAG,6BAA6BD,OAAO,CAACC,QAAQ,EAAE;;MAEpE,OAAOD,OAAO;IAChB,CAAC,CAAC,CAAC,CACJ;EACH;EAGAE,aAAa,CAACC,QAAkB;IAC9B,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAC,IAAI,CAACP,GAAG,GAAG,YAAY,EAAEM,QAAQ,CAAC;EAC1D;EACE;EACAE,MAAM,CAACC,EAAM;IACX,OAAO,IAAI,CAACd,IAAI,CAACa,MAAM,CAAC,IAAI,CAACR,GAAG,GAAC,KAAK,GAACS,EAAE,CAAC;EAC5C;EAEAC,cAAc,CAACD,EAAM;IACnB,OAAO,IAAI,CAACd,IAAI,CAACI,GAAG,CAAe,IAAI,CAACC,GAAG,GAAC,KAAK,GAACS,EAAE,CAAC;EACvD;EAEAE,MAAM,CAACF,EAAM,EAACG,IAAQ;IACpB,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAC,IAAI,CAACb,GAAG,GAAC,KAAK,GAACS,EAAE,EAACG,IAAI,CAAC;EAC9C;EACAE,YAAY,CAACC,WAAmB;IAC9B,OAAO,IAAI,CAACpB,IAAI,CAACI,GAAG,CAAiB,GAAG,IAAI,CAACC,GAAG,UAAUe,WAAW,EAAE,CAAC;EAC1E;;AA3CStB,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAuB,SAArBvB,qBAAqB;EAAAwB,YAFpB;AAAM","names":["BehaviorSubject","map","ProductServiceService","constructor","http","searchBarTouchedSubject","asObservable","getProduit","get","url","pipe","products","product","imageUrl","createProduct","prodData","post","delete","id","getProductById","update","hero","put","searchByName","ProductName","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\USER\\Desktop\\produit\\angular\\angular\\src\\app\\product-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ModelProduit } from './Model/model-produit';\nimport { BehaviorSubject,Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductServiceService {\n\n  constructor(private http: HttpClient) { }\n\n  private url = 'http://localhost:3000/api/';\n  products:any;\n  //initialase BehaviorSubject to follow the change of the search \n  searchBarTouchedSubject = new BehaviorSubject<String>(\"\");\n  //convet the value to observable to allow other parte to know if the value change\n  searchBarTouched$ = this.searchBarTouchedSubject.asObservable();\n\n  searchInput!: string;\n\n\n  getProduit(): Observable<ModelProduit[]> {\n    return this.http.get<ModelProduit[]>(this.url + 'GetProduct').pipe(\n      map(products => products.map(product => {\n        if (product.imageUrl) {\n          product.imageUrl = `http://localhost:3000/api/${product.imageUrl}`;\n        }\n        return product;\n      }))\n    );\n  }\n\n\n  createProduct(prodData: FormData): Observable<any> {\n    return this.http.post(this.url + 'AddProduct', prodData);\n  }\n    //delete Product\n    delete(id:any):Observable<any>{\n      return this.http.delete(this.url+\"id/\"+id);\n    }\n  \n    getProductById(id:any):Observable<ModelProduit>{\n      return this.http.get<ModelProduit>(this.url+\"id/\"+id);\n    }\n    \n    update(id:any,hero:any){\n      return this.http.put(this.url+\"id/\"+id,hero);\n    }\n    searchByName(ProductName: string): Observable<ModelProduit[]> {\n      return this.http.get<ModelProduit[]>(`${this.url}search/${ProductName}`);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}