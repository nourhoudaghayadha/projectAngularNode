{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductServiceService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:3000/api/';\n    //initialase BehaviorSubject to follow the change of the search \n    this.searchBarTouchedSubject = new BehaviorSubject(\"\");\n    //convet the value to observable to allow other parte to know if the value change\n    this.searchBarTouched$ = this.searchBarTouchedSubject.asObservable();\n  }\n  getHttpOptions() {\n    const token = localStorage.getItem('token');\n    return {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      })\n    };\n  }\n  getProduit() {\n    return this.http.get(this.url + 'GetProduct', this.getHttpOptions());\n  }\n  createProduct(prodData) {\n    return this.http.post(this.url + 'AddProduct', prodData, this.getHttpOptions());\n  }\n  delete(id) {\n    return this.http.delete(this.url + 'id/' + id, this.getHttpOptions());\n  }\n  getProductById(id) {\n    return this.http.get(this.url + 'id/' + id, this.getHttpOptions());\n  }\n  update(id, prodData) {\n    return this.http.put(this.url + 'id/' + id, prodData, this.getHttpOptions());\n  }\n  searchByName(productName) {\n    return this.http.get(`${this.url}search/${productName}`, this.getHttpOptions());\n  }\n}\nProductServiceService.ɵfac = function ProductServiceService_Factory(t) {\n  return new (t || ProductServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductServiceService,\n  factory: ProductServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,eAAe,QAAmB,MAAM;;;AAKjD,OAAM,MAAOC,qBAAqB;EAEhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAWhB,QAAG,GAAG,4BAA4B;IAI1C;IACA,4BAAuB,GAAG,IAAIH,eAAe,CAAS,EAAE,CAAC;IACzD;IACA,sBAAiB,GAAG,IAAI,CAACI,uBAAuB,CAACC,YAAY,EAAE;EAlBvB;EAEhCC,cAAc;IACpB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO;MACLC,OAAO,EAAE,IAAIX,WAAW,CAAC;QACvB,eAAe,EAAE,UAAUQ,KAAK;OACjC;KACF;EACH;EAcAI,UAAU;IACR,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAiB,IAAI,CAACC,GAAG,GAAG,YAAY,EAAC,IAAI,CAACP,cAAc,EAAE,CAAC;EAGrF;EAEAQ,aAAa,CAACC,QAAkB;IAC9B,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAC,IAAI,CAACH,GAAG,GAAG,YAAY,EAAEE,QAAQ,EAAE,IAAI,CAACT,cAAc,EAAE,CAAC;EACjF;EAEAW,MAAM,CAACC,EAAO;IACZ,OAAO,IAAI,CAACf,IAAI,CAACc,MAAM,CAAC,IAAI,CAACJ,GAAG,GAAG,KAAK,GAAGK,EAAE,EAAE,IAAI,CAACZ,cAAc,EAAE,CAAC;EACvE;EAEAa,cAAc,CAACD,EAAO;IACpB,OAAO,IAAI,CAACf,IAAI,CAACS,GAAG,CAAe,IAAI,CAACC,GAAG,GAAG,KAAK,GAAGK,EAAE,EAAE,IAAI,CAACZ,cAAc,EAAE,CAAC;EAClF;EAEAc,MAAM,CAACF,EAAO,EAAEH,QAAa;IAC3B,OAAO,IAAI,CAACZ,IAAI,CAACkB,GAAG,CAAC,IAAI,CAACR,GAAG,GAAG,KAAK,GAAGK,EAAE,EAAEH,QAAQ,EAAE,IAAI,CAACT,cAAc,EAAE,CAAC;EAC9E;EAEAgB,YAAY,CAACC,WAAmB;IAC9B,OAAO,IAAI,CAACpB,IAAI,CAACS,GAAG,CAAiB,GAAG,IAAI,CAACC,GAAG,UAAUU,WAAW,EAAE,EAAE,IAAI,CAACjB,cAAc,EAAE,CAAC;EAGjG;;AAnDWL,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;SAArBA,qBAAqB;EAAAuB,SAArBvB,qBAAqB;EAAAwB,YAFpB;AAAM","names":["HttpHeaders","BehaviorSubject","ProductServiceService","constructor","http","searchBarTouchedSubject","asObservable","getHttpOptions","token","localStorage","getItem","headers","getProduit","get","url","createProduct","prodData","post","delete","id","getProductById","update","put","searchByName","productName","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\USER\\Desktop\\produit\\angular\\angular\\src\\app\\product-service.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ModelProduit } from './Model/model-produit';\nimport { BehaviorSubject,Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductServiceService {\n\n  constructor(private http: HttpClient) { }\n\n  private getHttpOptions() {\n    const token = localStorage.getItem('token');\n    return {\n      headers: new HttpHeaders({\n        'Authorization': `Bearer ${token}`\n      })\n    };\n  }\n\n  private url = 'http://localhost:3000/api/';\n  \n\n  products:any;\n  //initialase BehaviorSubject to follow the change of the search \n  searchBarTouchedSubject = new BehaviorSubject<String>(\"\");\n  //convet the value to observable to allow other parte to know if the value change\n  searchBarTouched$ = this.searchBarTouchedSubject.asObservable();\n\n  searchInput!: string;\n\n  \n  getProduit(): Observable<ModelProduit[]> {\n    return this.http.get<ModelProduit[]>(this.url + 'GetProduct',this.getHttpOptions())\n  \n    ;\n  }\n\n  createProduct(prodData: FormData): Observable<any> {\n    return this.http.post(this.url + 'AddProduct', prodData, this.getHttpOptions());\n  }\n\n  delete(id: any): Observable<any> {\n    return this.http.delete(this.url + 'id/' + id, this.getHttpOptions());\n  }\n\n  getProductById(id: any): Observable<ModelProduit> {\n    return this.http.get<ModelProduit>(this.url + 'id/' + id, this.getHttpOptions());\n  }\n\n  update(id: any, prodData: any): Observable<any> {\n    return this.http.put(this.url + 'id/' + id, prodData, this.getHttpOptions());\n  }\n\n  searchByName(productName: string): Observable<ModelProduit[]> {\n    return this.http.get<ModelProduit[]>(`${this.url}search/${productName}`, this.getHttpOptions())\n  \n  \n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}